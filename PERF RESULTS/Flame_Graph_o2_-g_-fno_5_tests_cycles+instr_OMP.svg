<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="230.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="213" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="213" > </text>
<g id="frames">
<g >
<title>matmul._omp_fn.0 (74,005,288 samples, 0.01%)</title><rect x="80.0" y="133" width="0.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="83.02" y="143.5" ></text>
</g>
<g >
<title>udelay (69,855,614 samples, 0.01%)</title><rect x="11.4" y="149" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="14.37" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (271,874,265 samples, 0.05%)</title><rect x="26.3" y="149" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="29.33" y="159.5" ></text>
</g>
<g >
<title>build_tokenizer (174,962,979 samples, 0.03%)</title><rect x="375.0" y="149" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="377.97" y="159.5" ></text>
</g>
<g >
<title>kworker/2:1-eve (175,410,494 samples, 0.03%)</title><rect x="14.7" y="165" width="0.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="17.69" y="175.5" ></text>
</g>
<g >
<title>[unknown]  (287,527,251 samples, 0.05%)</title><rect x="10.1" y="133" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.13" y="143.5" ></text>
</g>
<g >
<title>[unknown]  (206,506,088 samples, 0.04%)</title><rect x="11.7" y="133" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="14.73" y="143.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (376,939,502,964 samples, 67.55%)</title><rect x="390.2" y="149" width="797.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="393.22" y="159.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>handle_mm_fault (114,339,909 samples, 0.02%)</title><rect x="1185.7" y="117" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1188.74" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (56,902,252 samples, 0.01%)</title><rect x="81.5" y="117" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="84.52" y="127.5" ></text>
</g>
<g >
<title>next_uptodate_page (214,832,919 samples, 0.04%)</title><rect x="1186.2" y="117" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1189.19" y="127.5" ></text>
</g>
<g >
<title>NetworkManager (471,533,964 samples, 0.08%)</title><rect x="10.0" y="165" width="1.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (92,437,464 samples, 0.02%)</title><rect x="23.9" y="133" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="26.88" y="143.5" ></text>
</g>
<g >
<title>softmax (167,497,952 samples, 0.03%)</title><rect x="29.0" y="133" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="31.95" y="143.5" ></text>
</g>
<g >
<title>[unknown]  (256,153,209 samples, 0.05%)</title><rect x="11.7" y="149" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="14.69" y="159.5" ></text>
</g>
<g >
<title>[unknown]  (401,226,686 samples, 0.07%)</title><rect x="10.1" y="149" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.05" y="159.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (125,887,940,495 samples, 22.56%)</title><rect x="108.4" y="133" width="266.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="111.42" y="143.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>__mod_memcg_lruvec_state (56,503,503 samples, 0.01%)</title><rect x="1182.5" y="117" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1185.47" y="127.5" ></text>
</g>
<g >
<title>_save_context (48,632,822 samples, 0.01%)</title><rect x="81.6" y="117" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="84.64" y="127.5" ></text>
</g>
<g >
<title>clock_gettime (56,101,085 samples, 0.01%)</title><rect x="374.6" y="117" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="377.64" y="127.5" ></text>
</g>
<g >
<title>kworker/3:2 (153,515,116 samples, 0.03%)</title><rect x="15.4" y="165" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="18.38" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (114,002,361 samples, 0.02%)</title><rect x="14.2" y="149" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="17.22" y="159.5" ></text>
</g>
<g >
<title>__this_cpu_preempt_check (65,024,744 samples, 0.01%)</title><rect x="1183.2" y="117" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1186.21" y="127.5" ></text>
</g>
<g >
<title>write (3,836,691,316 samples, 0.69%)</title><rect x="18.0" y="149" width="8.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="20.95" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (315,725,506 samples, 0.06%)</title><rect x="20.3" y="133" width="0.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="23.34" y="143.5" ></text>
</g>
<g >
<title>softmax (313,237,524 samples, 0.06%)</title><rect x="91.9" y="37" width="0.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="94.89" y="47.5" ></text>
</g>
<g >
<title>[unknown] (138,342,367,055 samples, 24.79%)</title><rect x="82.2" y="149" width="292.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="85.22" y="159.5" >[unknown]</text>
</g>
<g >
<title>check_preemption_disabled (52,630,288 samples, 0.01%)</title><rect x="93.0" y="69" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="95.97" y="79.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (6,948,877,649 samples, 1.25%)</title><rect x="93.7" y="133" width="14.7" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="96.69" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (5,000,752,783 samples, 0.90%)</title><rect x="83.0" y="117" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="86.02" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (118,418,467 samples, 0.02%)</title><rect x="1184.5" y="117" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1187.53" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_lock (146,554,618 samples, 0.03%)</title><rect x="1183.4" y="117" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1186.35" y="127.5" ></text>
</g>
<g >
<title>__handle_mm_fault (65,779,155 samples, 0.01%)</title><rect x="1182.2" y="117" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1185.19" y="127.5" ></text>
</g>
<g >
<title>wpa_supplicant (1,148,122,158 samples, 0.21%)</title><rect x="1187.6" y="165" width="2.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1190.56" y="175.5" ></text>
</g>
<g >
<title>powf (279,866,916 samples, 0.05%)</title><rect x="87.0" y="53" width="0.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="90.01" y="63.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (73,819,130 samples, 0.01%)</title><rect x="17.6" y="117" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="20.64" y="127.5" ></text>
</g>
<g >
<title>perf (4,133,285,233 samples, 0.74%)</title><rect x="17.3" y="165" width="8.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="20.33" y="175.5" ></text>
</g>
<g >
<title>softmax (1,621,803,209 samples, 0.29%)</title><rect x="89.1" y="53" width="3.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="92.12" y="63.5" ></text>
</g>
<g >
<title>expf (388,848,510 samples, 0.07%)</title><rect x="80.2" y="117" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="83.18" y="127.5" ></text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (69,280,490 samples, 0.01%)</title><rect x="21.2" y="133" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="24.23" y="143.5" ></text>
</g>
<g >
<title>_IO_fread (90,751,454 samples, 0.02%)</title><rect x="374.8" y="149" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="377.77" y="159.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (6,911,916,683 samples, 1.24%)</title><rect x="375.3" y="133" width="14.7" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="378.34" y="143.5" ></text>
</g>
<g >
<title>rmsnorm (94,634,104 samples, 0.02%)</title><rect x="88.0" y="37" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="91.00" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (51,678,635 samples, 0.01%)</title><rect x="82.3" y="117" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="85.29" y="127.5" ></text>
</g>
<g >
<title>__mod_memcg_state (47,835,855 samples, 0.01%)</title><rect x="1182.6" y="117" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1185.59" y="127.5" ></text>
</g>
<g >
<title>futex_wake (62,265,215 samples, 0.01%)</title><rect x="81.9" y="117" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="84.87" y="127.5" ></text>
</g>
<g >
<title>[unknown] (59,891,227 samples, 0.01%)</title><rect x="12.2" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.23" y="159.5" ></text>
</g>
<g >
<title>panel-8-pulseau (185,700,668 samples, 0.03%)</title><rect x="16.9" y="165" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="19.93" y="175.5" ></text>
</g>
<g >
<title>forward (94,634,104 samples, 0.02%)</title><rect x="88.0" y="53" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="91.00" y="63.5" ></text>
</g>
<g >
<title>main (4,517,440,507 samples, 0.81%)</title><rect x="83.1" y="101" width="9.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="86.06" y="111.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (88,902,072 samples, 0.02%)</title><rect x="79.8" y="133" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="82.83" y="143.5" ></text>
</g>
<g >
<title>__poll (189,927,694 samples, 0.03%)</title><rect x="17.6" y="149" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="20.55" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (102,050,908 samples, 0.02%)</title><rect x="373.8" y="101" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="376.80" y="111.5" ></text>
</g>
<g >
<title>dbus-daemon (186,117,274 samples, 0.03%)</title><rect x="12.4" y="165" width="0.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="15.39" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (77,630,558 samples, 0.01%)</title><rect x="81.4" y="117" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="84.35" y="127.5" ></text>
</g>
<g >
<title>[unknown]  (119,393,585 samples, 0.02%)</title><rect x="17.0" y="133" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="19.99" y="143.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (161,112,728 samples, 0.03%)</title><rect x="1182.9" y="117" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1185.87" y="127.5" ></text>
</g>
<g >
<title>generate (2,161,293,188 samples, 0.39%)</title><rect x="88.0" y="69" width="4.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="90.98" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (88,094,973 samples, 0.02%)</title><rect x="15.1" y="149" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="18.11" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (117,604,762 samples, 0.02%)</title><rect x="14.7" y="149" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="17.71" y="159.5" ></text>
</g>
<g >
<title>sample.part.0 (339,416,370 samples, 0.06%)</title><rect x="88.2" y="53" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="91.20" y="63.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (160,065,116 samples, 0.03%)</title><rect x="20.0" y="133" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="23.00" y="143.5" ></text>
</g>
<g >
<title>blueman-tray (379,485,582 samples, 0.07%)</title><rect x="11.6" y="165" width="0.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="14.58" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (93,028,432 samples, 0.02%)</title><rect x="11.9" y="117" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="14.86" y="127.5" ></text>
</g>
<g >
<title>__munmap (464,846,315 samples, 0.08%)</title><rect x="92.6" y="85" width="1.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="95.61" y="95.5" ></text>
</g>
<g >
<title>_IO_fread (149,567,425 samples, 0.03%)</title><rect x="375.0" y="133" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="377.97" y="143.5" ></text>
</g>
<g >
<title>[unknown] (63,197,375 samples, 0.01%)</title><rect x="12.6" y="149" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="15.56" y="159.5" ></text>
</g>
<g >
<title>kworker/1:2-eve (163,968,491 samples, 0.03%)</title><rect x="14.2" y="165" width="0.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="17.20" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (48,440,775 samples, 0.01%)</title><rect x="10.4" y="117" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="13.45" y="127.5" ></text>
</g>
<g >
<title>main (80,213,998 samples, 0.01%)</title><rect x="17.4" y="101" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="20.38" y="111.5" ></text>
</g>
<g >
<title>kworker/u8:1-cf (493,626,739 samples, 0.09%)</title><rect x="15.7" y="165" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="18.71" y="175.5" ></text>
</g>
<g >
<title>nl_sendmsg (1,102,880,448 samples, 0.20%)</title><rect x="1187.7" y="149" width="2.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1190.65" y="159.5" ></text>
</g>
<g >
<title>[perf] (64,541,220 samples, 0.01%)</title><rect x="17.4" y="37" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="20.41" y="47.5" ></text>
</g>
<g >
<title>kworker/3:1-eve (133,685,366 samples, 0.02%)</title><rect x="15.1" y="165" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="18.10" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (60,445,176 samples, 0.01%)</title><rect x="11.0" y="149" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="14.04" y="159.5" ></text>
</g>
<g >
<title>GOMP_parallel (351,238,626 samples, 0.06%)</title><rect x="28.6" y="149" width="0.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="31.57" y="159.5" ></text>
</g>
<g >
<title>sincosf32 (178,790,577 samples, 0.03%)</title><rect x="87.6" y="53" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="90.60" y="63.5" ></text>
</g>
<g >
<title>expf (126,158,769 samples, 0.02%)</title><rect x="29.0" y="117" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="31.95" y="127.5" ></text>
</g>
<g >
<title>[perf] (80,213,998 samples, 0.01%)</title><rect x="17.4" y="85" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="20.38" y="95.5" ></text>
</g>
<g >
<title>test_generate (464,846,315 samples, 0.08%)</title><rect x="92.6" y="101" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="95.61" y="111.5" ></text>
</g>
<g >
<title>clear_page_dirty_for_io (50,240,112 samples, 0.01%)</title><rect x="16.1" y="149" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="19.15" y="159.5" ></text>
</g>
<g >
<title>expf (1,262,670,850 samples, 0.23%)</title><rect x="89.1" y="37" width="2.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="92.13" y="47.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (184,489,986 samples, 0.03%)</title><rect x="24.3" y="133" width="0.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="27.29" y="143.5" ></text>
</g>
<g >
<title>syscall (477,249,357 samples, 0.09%)</title><rect x="81.2" y="133" width="1.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="84.22" y="143.5" ></text>
</g>
<g >
<title>[unknown]  (1,102,880,448 samples, 0.20%)</title><rect x="1187.7" y="133" width="2.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1190.65" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (231,589,871 samples, 0.04%)</title><rect x="82.3" y="133" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="85.29" y="143.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (54,664,031 samples, 0.01%)</title><rect x="22.4" y="133" width="0.2" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="25.44" y="143.5" ></text>
</g>
<g >
<title>forward (754,113,042 samples, 0.14%)</title><rect x="85.3" y="53" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="88.26" y="63.5" ></text>
</g>
<g >
<title>filemap_map_pages (157,087,455 samples, 0.03%)</title><rect x="1185.1" y="117" width="0.4" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="1188.15" y="127.5" ></text>
</g>
<g >
<title>gdbus (291,151,968 samples, 0.05%)</title><rect x="12.8" y="165" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="15.78" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (94,396,085 samples, 0.02%)</title><rect x="29.3" y="149" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="32.31" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (393,509,178 samples, 0.07%)</title><rect x="1183.7" y="117" width="0.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1186.70" y="127.5" ></text>
</g>
<g >
<title>softmax (74,947,835 samples, 0.01%)</title><rect x="88.8" y="37" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="91.76" y="47.5" ></text>
</g>
<g >
<title>kworker/2:0H-kb (69,866,824 samples, 0.01%)</title><rect x="14.5" y="165" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="17.55" y="175.5" ></text>
</g>
<g >
<title>kworker/1:1H-kb (63,960,346 samples, 0.01%)</title><rect x="14.1" y="165" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="17.07" y="175.5" ></text>
</g>
<g >
<title>rcu_preempt (93,154,788 samples, 0.02%)</title><rect x="26.1" y="165" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="29.08" y="175.5" ></text>
</g>
<g >
<title>softmax (491,953,962 samples, 0.09%)</title><rect x="80.2" y="133" width="1.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="83.18" y="143.5" ></text>
</g>
<g >
<title>get_page_from_freelist (61,394,428 samples, 0.01%)</title><rect x="23.6" y="133" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="26.58" y="143.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (23,776,219,113 samples, 4.26%)</title><rect x="29.6" y="133" width="50.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="32.55" y="143.5" >[libg..</text>
</g>
<g >
<title>_IO_fread (57,141,198 samples, 0.01%)</title><rect x="374.8" y="133" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="377.83" y="143.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (376,892,420,037 samples, 67.54%)</title><rect x="390.2" y="133" width="797.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="393.25" y="143.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>unmap_page_range (83,558,687 samples, 0.01%)</title><rect x="93.4" y="69" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="96.42" y="79.5" ></text>
</g>
<g >
<title>RTW_CMD_THREAD (245,852,523 samples, 0.04%)</title><rect x="11.0" y="165" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="14.00" y="175.5" ></text>
</g>
<g >
<title>[unknown]  (171,224,091 samples, 0.03%)</title><rect x="12.9" y="133" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="15.88" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (404,108,207 samples, 0.07%)</title><rect x="1187.8" y="117" width="0.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1190.78" y="127.5" ></text>
</g>
<g >
<title>strcmp (120,942,010 samples, 0.02%)</title><rect x="82.5" y="117" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="85.52" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (243,392,510 samples, 0.04%)</title><rect x="1188.6" y="117" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1191.63" y="127.5" ></text>
</g>
<g >
<title>[unknown] (80,213,998 samples, 0.01%)</title><rect x="17.4" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.38" y="159.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (6,957,745,854 samples, 1.25%)</title><rect x="375.3" y="149" width="14.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="378.34" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (121,962,579 samples, 0.02%)</title><rect x="13.6" y="149" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="16.60" y="159.5" ></text>
</g>
<g >
<title>all (558,019,491,782 samples, 100%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>check_preemption_disabled (48,662,039 samples, 0.01%)</title><rect x="1184.8" y="117" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1187.84" y="127.5" ></text>
</g>
<g >
<title>preempt_count_add (57,839,493 samples, 0.01%)</title><rect x="25.3" y="133" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="28.32" y="143.5" ></text>
</g>
<g >
<title>crc32_body (298,247,691 samples, 0.05%)</title><rect x="21.5" y="133" width="0.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="24.50" y="143.5" ></text>
</g>
<g >
<title>page_add_file_rmap (71,558,637 samples, 0.01%)</title><rect x="1186.6" y="117" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1189.64" y="127.5" ></text>
</g>
<g >
<title>sample_topp (94,409,086 samples, 0.02%)</title><rect x="88.9" y="53" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="91.92" y="63.5" ></text>
</g>
<g >
<title>__asm_copy_to_user (244,521,455 samples, 0.04%)</title><rect x="18.2" y="133" width="0.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="21.19" y="143.5" ></text>
</g>
<g >
<title>testc_omp (548,084,647,747 samples, 98.22%)</title><rect x="28.6" y="165" width="1159.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="31.57" y="175.5" >testc_omp</text>
</g>
<g >
<title>[libc.so.6] (80,213,998 samples, 0.01%)</title><rect x="17.4" y="117" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.38" y="127.5" ></text>
</g>
<g >
<title>tick_nohz_idle_exit (70,242,024 samples, 0.01%)</title><rect x="28.4" y="149" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="31.41" y="159.5" ></text>
</g>
<g >
<title>kworker/u8:3 (56,107,113 samples, 0.01%)</title><rect x="16.7" y="165" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="19.75" y="175.5" ></text>
</g>
<g >
<title>[unknown]  (160,630,634 samples, 0.03%)</title><rect x="16.9" y="149" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="19.93" y="159.5" ></text>
</g>
<g >
<title>release_pages (53,526,026 samples, 0.01%)</title><rect x="93.3" y="69" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="96.30" y="79.5" ></text>
</g>
<g >
<title>kworker/0:2-eve (208,302,414 samples, 0.04%)</title><rect x="13.6" y="165" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="16.57" y="175.5" ></text>
</g>
<g >
<title>forward (2,256,984,808 samples, 0.40%)</title><rect x="83.2" y="69" width="4.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="86.21" y="79.5" ></text>
</g>
<g >
<title>GOMP_parallel (110,932,776 samples, 0.02%)</title><rect x="28.6" y="133" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="31.57" y="143.5" ></text>
</g>
<g >
<title>softmax (85,341,178 samples, 0.02%)</title><rect x="81.0" y="117" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="84.03" y="127.5" ></text>
</g>
<g >
<title>swapper (1,070,304,380 samples, 0.19%)</title><rect x="26.3" y="165" width="2.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="29.30" y="175.5" ></text>
</g>
<g >
<title>next_uptodate_page (77,904,408 samples, 0.01%)</title><rect x="374.3" y="101" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="377.31" y="111.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (73,920,944 samples, 0.01%)</title><rect x="23.0" y="133" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="26.05" y="143.5" ></text>
</g>
<g >
<title>[unknown] (80,213,998 samples, 0.01%)</title><rect x="17.4" y="133" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="20.38" y="143.5" ></text>
</g>
<g >
<title>get_page_from_freelist (54,868,954 samples, 0.01%)</title><rect x="1185.6" y="117" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1188.62" y="127.5" ></text>
</g>
<g >
<title>[unknown]  (258,615,584 samples, 0.05%)</title><rect x="12.8" y="149" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="15.78" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (136,539,399 samples, 0.02%)</title><rect x="15.8" y="149" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="18.84" y="159.5" ></text>
</g>
<g >
<title>omp_get_wtime (64,360,632 samples, 0.01%)</title><rect x="374.6" y="133" width="0.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="377.63" y="143.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (125,874,299,160 samples, 22.56%)</title><rect x="108.4" y="117" width="266.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="111.42" y="127.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>__poll (187,620,902 samples, 0.03%)</title><rect x="17.6" y="133" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="20.56" y="143.5" ></text>
</g>
<g >
<title>arch_cpu_idle (640,507,984 samples, 0.11%)</title><rect x="26.9" y="149" width="1.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="29.93" y="159.5" ></text>
</g>
<g >
<title>test_generate (4,429,324,596 samples, 0.79%)</title><rect x="83.2" y="85" width="9.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="86.19" y="95.5" ></text>
</g>
<g >
<title>write (82,197,560 samples, 0.01%)</title><rect x="1187.4" y="149" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1190.38" y="159.5" ></text>
</g>
<g >
<title>expf (939,323,183 samples, 0.17%)</title><rect x="83.3" y="53" width="1.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="86.26" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (56,319,917 samples, 0.01%)</title><rect x="390.1" y="133" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="393.06" y="143.5" ></text>
</g>
<g >
<title>page_remove_rmap (68,781,728 samples, 0.01%)</title><rect x="93.1" y="69" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="96.15" y="79.5" ></text>
</g>
<g >
<title>[perf] (80,213,998 samples, 0.01%)</title><rect x="17.4" y="69" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="20.38" y="79.5" ></text>
</g>
<g >
<title>udelay (219,034,056 samples, 0.04%)</title><rect x="1189.5" y="117" width="0.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1192.51" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (103,027,760 samples, 0.02%)</title><rect x="15.4" y="149" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="18.40" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (58,544,492 samples, 0.01%)</title><rect x="26.1" y="149" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="29.09" y="159.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (24,927,111,349 samples, 4.47%)</title><rect x="29.5" y="149" width="52.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="32.51" y="159.5" >[libg..</text>
</g>
<g >
<title>free (56,319,917 samples, 0.01%)</title><rect x="390.1" y="149" width="0.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="393.06" y="159.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (113,608,818 samples, 0.02%)</title><rect x="82.8" y="133" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="85.78" y="143.5" ></text>
</g>
<g >
<title>[perf] (78,370,585 samples, 0.01%)</title><rect x="17.4" y="53" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="20.38" y="63.5" ></text>
</g>
<g >
<title>__this_cpu_preempt_check (58,165,446 samples, 0.01%)</title><rect x="92.8" y="69" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="95.81" y="79.5" ></text>
</g>
<g >
<title>softmax (74,855,042 samples, 0.01%)</title><rect x="79.9" y="117" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="82.86" y="127.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (113,608,818 samples, 0.02%)</title><rect x="82.8" y="117" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="85.78" y="127.5" ></text>
</g>
<g >
<title>[unknown] (5,001,216,475 samples, 0.90%)</title><rect x="83.0" y="133" width="10.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="86.02" y="143.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (81,697,753 samples, 0.01%)</title><rect x="19.3" y="133" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="22.34" y="143.5" ></text>
</g>
</g>
</svg>
