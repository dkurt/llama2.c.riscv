<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="230.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="213" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="213" > </text>
<g id="frames">
<g >
<title>softmax (84,443,082 samples, 0.02%)</title><rect x="75.7" y="117" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="78.74" y="127.5" ></text>
</g>
<g >
<title>[unknown] (4,945,484,602 samples, 0.89%)</title><rect x="77.5" y="133" width="10.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="80.54" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (152,993,813 samples, 0.03%)</title><rect x="13.0" y="149" width="0.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="15.99" y="159.5" ></text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (72,327,537 samples, 0.01%)</title><rect x="19.8" y="133" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="22.79" y="143.5" ></text>
</g>
<g >
<title>malloc@plt (48,376,121 samples, 0.01%)</title><rect x="86.2" y="37" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="89.22" y="47.5" ></text>
</g>
<g >
<title>crc32_body (262,608,329 samples, 0.05%)</title><rect x="20.1" y="133" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="23.07" y="143.5" ></text>
</g>
<g >
<title>check_preemption_disabled (49,037,605 samples, 0.01%)</title><rect x="1187.2" y="117" width="0.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1190.21" y="127.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (95,597,105 samples, 0.02%)</title><rect x="21.5" y="133" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="24.54" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (145,728,204 samples, 0.03%)</title><rect x="18.5" y="133" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="21.54" y="143.5" ></text>
</g>
<g >
<title>build_tokenizer (169,580,222 samples, 0.03%)</title><rect x="372.3" y="149" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="375.32" y="159.5" ></text>
</g>
<g >
<title>__poll (183,306,983 samples, 0.03%)</title><rect x="16.0" y="149" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="18.96" y="159.5" ></text>
</g>
<g >
<title>___might_sleep (52,557,557 samples, 0.01%)</title><rect x="16.4" y="133" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="19.36" y="143.5" ></text>
</g>
<g >
<title>softmax (320,581,997 samples, 0.06%)</title><rect x="86.3" y="37" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="89.32" y="47.5" ></text>
</g>
<g >
<title>compare_tokens (47,546,671 samples, 0.01%)</title><rect x="76.9" y="117" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="79.91" y="127.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (22,294,166,679 samples, 4.02%)</title><rect x="27.0" y="133" width="47.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="30.00" y="143.5" >[lib..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (120,222,193 samples, 0.02%)</title><rect x="1186.9" y="117" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1189.89" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (202,634,742 samples, 0.04%)</title><rect x="24.9" y="149" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="27.88" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (237,588,181 samples, 0.04%)</title><rect x="1186.4" y="117" width="0.5" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1189.38" y="127.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (126,380,122,281 samples, 22.79%)</title><rect x="103.0" y="117" width="269.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="106.04" y="127.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>kworker/u8:3-fl (483,313,019 samples, 0.09%)</title><rect x="14.3" y="165" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="17.34" y="175.5" ></text>
</g>
<g >
<title>gdbus (174,616,163 samples, 0.03%)</title><rect x="11.7" y="165" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="14.73" y="175.5" ></text>
</g>
<g >
<title>main (4,463,387,326 samples, 0.80%)</title><rect x="77.6" y="101" width="9.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="80.58" y="111.5" ></text>
</g>
<g >
<title>GOMP_parallel (91,576,648 samples, 0.02%)</title><rect x="26.0" y="133" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="29.04" y="143.5" ></text>
</g>
<g >
<title>all (554,467,100,942 samples, 100%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>arch_cpu_idle (244,200,994 samples, 0.04%)</title><rect x="25.3" y="149" width="0.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="28.33" y="159.5" ></text>
</g>
<g >
<title>kworker/2:0H-kb (66,764,094 samples, 0.01%)</title><rect x="12.8" y="165" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="15.83" y="175.5" ></text>
</g>
<g >
<title>[perf] (71,134,469 samples, 0.01%)</title><rect x="15.8" y="53" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.81" y="63.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (199,250,290 samples, 0.04%)</title><rect x="22.9" y="133" width="0.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="25.88" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (47,731,950 samples, 0.01%)</title><rect x="24.7" y="149" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="27.65" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (48,229,309 samples, 0.01%)</title><rect x="1188.0" y="117" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1190.97" y="127.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (102,521,952 samples, 0.02%)</title><rect x="22.4" y="133" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="25.43" y="143.5" ></text>
</g>
<g >
<title>__this_cpu_preempt_check (54,780,511 samples, 0.01%)</title><rect x="1185.9" y="117" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1188.90" y="127.5" ></text>
</g>
<g >
<title>free (52,145,281 samples, 0.01%)</title><rect x="387.6" y="149" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="390.65" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (327,329,284 samples, 0.06%)</title><rect x="18.9" y="133" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="21.85" y="143.5" ></text>
</g>
<g >
<title>filemap_map_pages (131,142,377 samples, 0.02%)</title><rect x="1187.6" y="117" width="0.3" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="1190.57" y="127.5" ></text>
</g>
<g >
<title>[unknown] (138,805,657,926 samples, 25.03%)</title><rect x="76.7" y="149" width="295.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="79.74" y="159.5" >[unknown]</text>
</g>
<g >
<title>_raw_spin_unlock_irq (85,254,856 samples, 0.02%)</title><rect x="12.5" y="149" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="15.55" y="159.5" ></text>
</g>
<g >
<title>_IO_fread (53,031,596 samples, 0.01%)</title><rect x="372.2" y="133" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="375.19" y="143.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (56,593,274 samples, 0.01%)</title><rect x="20.8" y="133" width="0.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="23.82" y="143.5" ></text>
</g>
<g >
<title>[unknown]  (243,676,917 samples, 0.04%)</title><rect x="10.9" y="149" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.87" y="159.5" ></text>
</g>
<g >
<title>softmax (171,633,939 samples, 0.03%)</title><rect x="26.4" y="133" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="29.40" y="143.5" ></text>
</g>
<g >
<title>expf (134,179,159 samples, 0.02%)</title><rect x="26.4" y="117" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="29.40" y="127.5" ></text>
</g>
<g >
<title>dbus-daemon (85,593,650 samples, 0.02%)</title><rect x="11.6" y="165" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="14.55" y="175.5" ></text>
</g>
<g >
<title>test_generate (462,730,005 samples, 0.08%)</title><rect x="87.1" y="101" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="90.07" y="111.5" ></text>
</g>
<g >
<title>kworker/3:0H-kb (57,748,681 samples, 0.01%)</title><rect x="14.1" y="165" width="0.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="17.10" y="175.5" ></text>
</g>
<g >
<title>do_page_fault (53,858,375 samples, 0.01%)</title><rect x="1187.3" y="117" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1190.35" y="127.5" ></text>
</g>
<g >
<title>_IO_fread (143,728,596 samples, 0.03%)</title><rect x="372.3" y="133" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="375.32" y="143.5" ></text>
</g>
<g >
<title>[unknown] (72,519,488 samples, 0.01%)</title><rect x="15.8" y="149" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="18.81" y="159.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (138,611,526 samples, 0.02%)</title><rect x="1185.6" y="117" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1188.61" y="127.5" ></text>
</g>
<g >
<title>[unknown]  (160,038,754 samples, 0.03%)</title><rect x="15.4" y="149" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.38" y="159.5" ></text>
</g>
<g >
<title>_save_context (51,115,396 samples, 0.01%)</title><rect x="76.2" y="117" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="79.22" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (202,010,073 samples, 0.04%)</title><rect x="13.5" y="149" width="0.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="16.48" y="159.5" ></text>
</g>
<g >
<title>unmap_page_range (83,055,666 samples, 0.01%)</title><rect x="87.9" y="69" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="90.88" y="79.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (126,389,328,233 samples, 22.79%)</title><rect x="103.0" y="133" width="269.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="106.04" y="143.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>perf (4,168,561,069 samples, 0.75%)</title><rect x="15.8" y="165" width="8.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="18.76" y="175.5" ></text>
</g>
<g >
<title>blueman-tray (367,756,105 samples, 0.07%)</title><rect x="10.8" y="165" width="0.7" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="13.77" y="175.5" ></text>
</g>
<g >
<title>__this_cpu_preempt_check (52,576,917 samples, 0.01%)</title><rect x="87.3" y="69" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="90.28" y="79.5" ></text>
</g>
<g >
<title>rcu_preempt (87,001,109 samples, 0.02%)</title><rect x="24.6" y="165" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="27.65" y="175.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (50,226,275 samples, 0.01%)</title><rect x="21.0" y="133" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="23.96" y="143.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (376,805,942,167 samples, 67.96%)</title><rect x="387.8" y="149" width="801.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="390.83" y="159.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>forward (729,036,574 samples, 0.13%)</title><rect x="79.7" y="53" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="82.73" y="63.5" ></text>
</g>
<g >
<title>kworker/1:1-eve (137,495,252 samples, 0.02%)</title><rect x="12.5" y="165" width="0.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.54" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock (156,602,663 samples, 0.03%)</title><rect x="1186.0" y="117" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1189.03" y="127.5" ></text>
</g>
<g >
<title>page_remove_rmap (76,178,925 samples, 0.01%)</title><rect x="87.6" y="69" width="0.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="90.59" y="79.5" ></text>
</g>
<g >
<title>softmax (1,634,686,242 samples, 0.29%)</title><rect x="83.5" y="53" width="3.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="86.53" y="63.5" ></text>
</g>
<g >
<title>sample_topp (97,049,687 samples, 0.02%)</title><rect x="83.3" y="53" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="86.32" y="63.5" ></text>
</g>
<g >
<title>expf (901,244,044 samples, 0.16%)</title><rect x="77.8" y="53" width="1.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="80.80" y="63.5" ></text>
</g>
<g >
<title>expf (1,259,014,591 samples, 0.23%)</title><rect x="83.5" y="37" width="2.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="86.54" y="47.5" ></text>
</g>
<g >
<title>[libc.so.6] (71,596,211 samples, 0.01%)</title><rect x="15.8" y="117" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.81" y="127.5" ></text>
</g>
<g >
<title>testc_omp_2 (546,913,813,110 samples, 98.64%)</title><rect x="26.0" y="165" width="1164.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="29.04" y="175.5" >testc_omp_2</text>
</g>
<g >
<title>next_uptodate_page (70,010,693 samples, 0.01%)</title><rect x="371.8" y="101" width="0.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="374.75" y="111.5" ></text>
</g>
<g >
<title>main (71,596,211 samples, 0.01%)</title><rect x="15.8" y="101" width="0.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="18.81" y="111.5" ></text>
</g>
<g >
<title>__asm_copy_to_user (246,985,913 samples, 0.04%)</title><rect x="16.6" y="133" width="0.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="19.58" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (52,145,281 samples, 0.01%)</title><rect x="387.6" y="133" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="390.65" y="143.5" ></text>
</g>
<g >
<title>swapper (553,817,805 samples, 0.10%)</title><rect x="24.9" y="165" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="27.85" y="175.5" ></text>
</g>
<g >
<title>[unknown]  (225,385,581 samples, 0.04%)</title><rect x="10.1" y="133" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.11" y="143.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (7,024,992,917 samples, 1.27%)</title><rect x="372.7" y="149" width="14.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="375.69" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (57,116,720 samples, 0.01%)</title><rect x="22.1" y="133" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="25.11" y="143.5" ></text>
</g>
<g >
<title>sample.part.0 (332,330,747 samples, 0.06%)</title><rect x="82.6" y="53" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="85.61" y="63.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (115,814,621 samples, 0.02%)</title><rect x="77.3" y="133" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="80.29" y="143.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (80,514,788 samples, 0.01%)</title><rect x="74.7" y="133" width="0.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="77.66" y="143.5" ></text>
</g>
<g >
<title>page_add_file_rmap (72,337,905 samples, 0.01%)</title><rect x="1189.0" y="117" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1192.04" y="127.5" ></text>
</g>
<g >
<title>[perf] (59,608,883 samples, 0.01%)</title><rect x="15.8" y="37" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.83" y="47.5" ></text>
</g>
<g >
<title>[unknown]  (50,028,109 samples, 0.01%)</title><rect x="11.4" y="133" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="14.41" y="143.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (23,379,584,576 samples, 4.22%)</title><rect x="27.0" y="149" width="49.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="29.98" y="159.5" >[libg..</text>
</g>
<g >
<title>panel-8-pulseau (181,633,744 samples, 0.03%)</title><rect x="15.4" y="165" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="18.37" y="175.5" ></text>
</g>
<g >
<title>syscall (384,323,035 samples, 0.07%)</title><rect x="75.9" y="133" width="0.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="78.92" y="143.5" ></text>
</g>
<g >
<title>forward (2,177,892,126 samples, 0.39%)</title><rect x="77.7" y="69" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="80.74" y="79.5" ></text>
</g>
<g >
<title>handle_mm_fault (112,920,732 samples, 0.02%)</title><rect x="1188.1" y="117" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1191.08" y="127.5" ></text>
</g>
<g >
<title>test_generate (4,365,659,349 samples, 0.79%)</title><rect x="77.7" y="85" width="9.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="80.72" y="95.5" ></text>
</g>
<g >
<title>kworker/2:1-mm_ (224,894,418 samples, 0.04%)</title><rect x="13.0" y="165" width="0.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="15.97" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (98,999,120 samples, 0.02%)</title><rect x="26.8" y="149" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="29.77" y="159.5" ></text>
</g>
<g >
<title>[unknown] (71,596,211 samples, 0.01%)</title><rect x="15.8" y="133" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="18.81" y="143.5" ></text>
</g>
<g >
<title>omp_get_wtime (51,253,945 samples, 0.01%)</title><rect x="372.0" y="133" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="375.03" y="143.5" ></text>
</g>
<g >
<title>expf (404,245,846 samples, 0.07%)</title><rect x="74.8" y="117" width="0.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="77.83" y="127.5" ></text>
</g>
<g >
<title>write (77,508,642 samples, 0.01%)</title><rect x="1189.8" y="149" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1192.80" y="159.5" ></text>
</g>
<g >
<title>kworker/0:2-eve (121,327,107 samples, 0.02%)</title><rect x="12.3" y="165" width="0.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.28" y="175.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (6,972,592,039 samples, 1.26%)</title><rect x="88.2" y="133" width="14.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="91.17" y="143.5" ></text>
</g>
<g >
<title>[perf] (71,596,211 samples, 0.01%)</title><rect x="15.8" y="69" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.81" y="79.5" ></text>
</g>
<g >
<title>GOMP_parallel (341,848,392 samples, 0.06%)</title><rect x="26.0" y="149" width="0.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="29.04" y="159.5" ></text>
</g>
<g >
<title>softmax (66,577,951 samples, 0.01%)</title><rect x="83.2" y="37" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="86.18" y="47.5" ></text>
</g>
<g >
<title>kworker/3:0-eve (302,106,151 samples, 0.05%)</title><rect x="13.5" y="165" width="0.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="16.46" y="175.5" ></text>
</g>
<g >
<title>forward (103,061,774 samples, 0.02%)</title><rect x="82.4" y="53" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="85.39" y="63.5" ></text>
</g>
<g >
<title>strcmp (119,558,482 samples, 0.02%)</title><rect x="77.0" y="117" width="0.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="80.03" y="127.5" ></text>
</g>
<g >
<title>kworker/u8:1-fl (49,629,577 samples, 0.01%)</title><rect x="14.2" y="165" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="17.23" y="175.5" ></text>
</g>
<g >
<title>futex_wake (52,469,689 samples, 0.01%)</title><rect x="76.4" y="117" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="79.43" y="127.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (6,962,806,641 samples, 1.26%)</title><rect x="372.7" y="133" width="14.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="375.69" y="143.5" ></text>
</g>
<g >
<title>forward._omp_fn.0 (102,197,218 samples, 0.02%)</title><rect x="74.4" y="133" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="77.44" y="143.5" ></text>
</g>
<g >
<title>softmax (510,086,992 samples, 0.09%)</title><rect x="74.8" y="133" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="77.83" y="143.5" ></text>
</g>
<g >
<title>[unknown]  (186,472,397 samples, 0.03%)</title><rect x="10.9" y="133" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.91" y="143.5" ></text>
</g>
<g >
<title>__handle_mm_fault (62,608,601 samples, 0.01%)</title><rect x="1184.9" y="117" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1187.91" y="127.5" ></text>
</g>
<g >
<title>rmsnorm (103,061,774 samples, 0.02%)</title><rect x="82.4" y="37" width="0.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="85.39" y="47.5" ></text>
</g>
<g >
<title>next_uptodate_page (225,108,472 samples, 0.04%)</title><rect x="1188.6" y="117" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1191.55" y="127.5" ></text>
</g>
<g >
<title>write (3,891,168,253 samples, 0.70%)</title><rect x="16.4" y="149" width="8.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="19.35" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (91,323,336 samples, 0.02%)</title><rect x="11.0" y="117" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="14.02" y="127.5" ></text>
</g>
<g >
<title>powf (283,435,880 samples, 0.05%)</title><rect x="81.4" y="53" width="0.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="84.41" y="63.5" ></text>
</g>
<g >
<title>clear_page_dirty_for_io (56,707,121 samples, 0.01%)</title><rect x="14.8" y="149" width="0.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="17.81" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (80,920,556 samples, 0.01%)</title><rect x="12.3" y="149" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="15.29" y="159.5" ></text>
</g>
<g >
<title>[unknown] (60,474,193 samples, 0.01%)</title><rect x="11.4" y="149" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.39" y="159.5" ></text>
</g>
<g >
<title>__find_get_block (48,307,380 samples, 0.01%)</title><rect x="17.5" y="133" width="0.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="20.55" y="143.5" ></text>
</g>
<g >
<title>NetworkManager (355,338,419 samples, 0.06%)</title><rect x="10.0" y="165" width="0.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>sincosf32 (169,693,038 samples, 0.03%)</title><rect x="82.0" y="53" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="85.02" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,943,637,863 samples, 0.89%)</title><rect x="77.5" y="117" width="10.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="80.54" y="127.5" ></text>
</g>
<g >
<title>_IO_fread (80,099,113 samples, 0.01%)</title><rect x="372.1" y="149" width="0.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="375.14" y="159.5" ></text>
</g>
<g >
<title>[unknown]  (124,719,568 samples, 0.02%)</title><rect x="15.4" y="133" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.42" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (229,809,465 samples, 0.04%)</title><rect x="76.8" y="133" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="79.80" y="143.5" ></text>
</g>
<g >
<title>[unknown]  (102,223,673 samples, 0.02%)</title><rect x="11.8" y="133" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="14.80" y="143.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (87,445,068 samples, 0.02%)</title><rect x="17.8" y="133" width="0.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="20.77" y="143.5" ></text>
</g>
<g >
<title>softmax (89,491,726 samples, 0.02%)</title><rect x="74.5" y="117" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="77.47" y="127.5" ></text>
</g>
<g >
<title>[libgomp.so.1.0.0] (115,814,621 samples, 0.02%)</title><rect x="77.3" y="117" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="80.29" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_lock (70,012,057 samples, 0.01%)</title><rect x="18.3" y="133" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="21.33" y="143.5" ></text>
</g>
<g >
<title>ext4_da_write_end (52,540,883 samples, 0.01%)</title><rect x="21.1" y="133" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="24.07" y="143.5" ></text>
</g>
<g >
<title>preempt_count_add (69,087,224 samples, 0.01%)</title><rect x="23.9" y="133" width="0.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="26.87" y="143.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (54,116,931 samples, 0.01%)</title><rect x="1185.2" y="117" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1188.17" y="127.5" ></text>
</g>
<g >
<title>[perf] (71,596,211 samples, 0.01%)</title><rect x="15.8" y="85" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="18.81" y="95.5" ></text>
</g>
<g >
<title>matmul._omp_fn.0 (376,757,970,890 samples, 67.95%)</title><rect x="387.9" y="133" width="801.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="390.85" y="143.5" >matmul._omp_fn.0</text>
</g>
<g >
<title>__munmap (462,730,005 samples, 0.08%)</title><rect x="87.1" y="85" width="1.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="90.07" y="95.5" ></text>
</g>
<g >
<title>[unknown]  (160,481,980 samples, 0.03%)</title><rect x="11.7" y="149" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="14.73" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irq (63,469,413 samples, 0.01%)</title><rect x="16.0" y="117" width="0.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="19.04" y="127.5" ></text>
</g>
<g >
<title>__poll (182,384,672 samples, 0.03%)</title><rect x="16.0" y="133" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="18.96" y="143.5" ></text>
</g>
<g >
<title>release_pages (56,241,837 samples, 0.01%)</title><rect x="87.7" y="69" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="90.75" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (148,717,818 samples, 0.03%)</title><rect x="14.5" y="149" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="17.47" y="159.5" ></text>
</g>
<g >
<title>[unknown]  (310,150,569 samples, 0.06%)</title><rect x="10.1" y="149" width="0.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.05" y="159.5" ></text>
</g>
<g >
<title>generate (2,173,532,855 samples, 0.39%)</title><rect x="82.4" y="69" width="4.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="85.38" y="79.5" ></text>
</g>
</g>
</svg>
